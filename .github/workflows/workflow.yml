name: CI build
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs :
  build :
    name : Build and analyze
    runs-on : ubuntu-latest
    steps :
      - uses : actions/checkout@v4
        with :
          fetch-depth : 0  # Shallow clones should be disabled for a better relevancy of analysis

        # Installation de Chrome pour Selenium
      - name: Install Chrome Browser for Selenium
        uses: browser-actions/setup-chrome@latest

        # Démarre le navigateur Chrome
      - name: run Chrome Browser for version control
        run: chrome --version

        # Configuration de JDK 21
      - name : Set up JDK 21
        uses : actions/setup-java@v4
        with :
          java-version : 21
          distribution : 'zulu'

      - name : Delete files
        run : rm -f src/main/resources/conf.properties

      - name : Create file
        run : echo "SECRET_KEY_CAPTCHA=${{ secrets.SECRET_KEY_CAPTCHA }}
              API_REDIRECTION=http://localhost:8080/" > src/main/resources/conf.properties

        # Mise en cache des paquets SonarQube
      - name : Cache SonarQube packages
        uses : actions/cache@v4
        with :
          path : ~/.sonar/cache
          key : ${{ runner.os }}-sonar${{ hashFiles('**/*.java') }}
          restore-keys : ${{ runner.os }}-sonar
        # Mise en cache des paquets Maven
      - name : Cache Maven packages
        uses : actions/cache@v4
        with :
          path : ~/.m2
          key : ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys : ${{ runner.os }}-m2

      # Build et analyse du projet
      - name : Build and analyze
        env :
          SONAR_TOKEN : ${{ secrets.SONAR_TOKEN }}
        run : mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=YacineRAFES_Conversa

      - name : Charging artefact #permet de charger un artefact
        uses : actions/upload-artifact@v4
        with :
          name : package.war
          path : target/*.war
          retention-days : 1

  Discord :
    name : Discord
    runs-on : ubuntu-latest
    needs : build

    steps :
      - name : Discord notification (succès)
        if : success()
        env :
          DISCORD_WEBHOOK : ${{ secrets.DISCORD_WEBHOOK }}
        uses : sarisia/actions-status-discord@v1
        with :
          description : 'Le projet ConversaWeb a été build avec succès'

      - name : Discord notification (échec)
        if : failure()
        env :
          DISCORD_WEBHOOK : ${{ secrets.DISCORD_WEBHOOK }}
        uses : sarisia/actions-status-discord@v1
        with :
          description : 'Le projet ConversaWeb a échoué'

  docker-build-image-api:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v4

      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker Build
        uses: docker/setup-buildx-action@v3

      - name: Connect to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # juste pour le contrôler
      -   name: List files in the repository
          run: ls ${{ github.workspace }}

      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: package.war

      # juste pour le contrôler
      - name: List files in the repository
        run: ls ${{ github.workspace }}

      # construction de l'image docker et push sur dockerhub
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/conversaweb:latest
      - run: echo "This job's status is ${{ job.status }}."

  #Notification for docker
  Discord_for_docker:
    name: Discord
    runs-on: ubuntu-latest
    needs: docker-build-image-api

    steps:
      -   name: Discord notification
          env:
            DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          uses: sarisia/actions-status-discord@v1
          if: always()
          with:
            description: 'Le projet ConversaWeb a été build avec DockerHub avec succès.'